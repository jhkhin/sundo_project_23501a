<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.postgres.sample.service.impl.dao.hij.HijDao">

	<!-- 관측소 목록 갯수 -->
	<select id="ijTotalCount" resultType="int">
		SELECT COUNT(*)
		FROM Observation
	</select>
	
	<!-- 관측소 목록 리스트 -->
	<select id="ijObservationList" parameterType="Observation" resultType="Observation">
		SELECT *
		FROM(	
			SELECT (row_number() over()) AS rn, a.*
			FROM(
				SELECT T.*, C.cate_name observe_method_name, O.org_name, O.org_area
				FROM 
				   Observation T
				   LEFT OUTER JOIN Code C
				      ON T.observe_method = C.cate_code
				      AND C.field_name = 'observe_method'
				   LEFT OUTER JOIN Organization O
				      ON T.org_code = O.org_code
				      )a
				)
		WHERE rn BETWEEN #{start} and #{end}
			
	</select>
	
	<!-- 코드 리스트 -->
	<select id="ijGetCodeList" parameterType="String" resultType="Code">
		SELECT *
		FROM Code
		WHERE field_name = #{field_name}
	</select>
	
	<!-- Organiztion 리스트 -->
	<select id="ijGetOrgList" resultType="Organization">
		SELECT *
		FROM ORGANIZATION
	</select>
	
	<!-- 필요한 테이블의 필드 가져오기 -->
	<select id="ijGetCategoryList" parameterType="CategoryVO" resultType="Organization">
		SELECT ${field_name}
		FROM ${tbl_name}
		GROUP BY ${field_name}
	</select>
	
	<!-- 관측소 등록 -->
	<insert id="ijObCreate" parameterType="Observation">
		
		INSERT INTO observation 
				(observe_code, 
				observe_post, 
				river_code, 
				observe_type, 
				latitude, 
				longitude, 
				observe_method, 
				org_code, 
				org_area, 
				create_datetime, 
				modify_datetime)
		VALUES(
				(SELECT (MAX(observe_code)+1) FROM Observation), 
				#{observe_post}, 
				#{river_code}, 
				#{observe_type}, 
				#{latitude}, 
				#{longitude}, 
				#{observe_method}, 
				#{org_code}, 
				#{org_area}, 
				NOW(), 
				NOW())
	</insert>
	
	<!-- river_code, river_name 가져오기 -->
	<select id="ijWaterGateList"  resultType="Watergate">
		SELECT *
		FROM Water_Gate
	</select>
	
	<!-- 관측소 테이블안 필드 가져오기 -->
	<select id="ijGetObservation" parameterType="Observation" resultType="Observation">
		SELECT T.*, C.cate_name observe_method_name, C2.cate_name observe_type_name, O.org_name, O.org_area
     	 FROM 
	         Observation T
	         LEFT OUTER JOIN Code C
	            ON T.observe_method = C.cate_code
	            AND C.field_name = 'observe_method'
	         LEFT OUTER JOIN Code C2
	            ON T.observe_type = C2.cate_code
	            AND C2.field_name = 'observe_type'
	         LEFT OUTER JOIN Organization O
	            ON T.org_code = O.org_code
		WHERE T.observe_code=#{observe_code}
	</select>
	
	<!-- 관측소 수정 -->
	<update id="ijObEdit" parameterType="Observation">
		UPDATE observation SET 
				observe_code=#{observe_code}, 
				observe_post=#{observe_post}, 
				river_code=#{river_code}, 
				observe_type=#{observe_type}, 
				latitude=#{latitude}, 
				longitude=#{longitude}, 
				observe_method=#{observe_method}, 
				org_code=#{org_code}, 
				org_area=#{org_area}, 
				modify_datetime=NOW()
		WHERE observe_code=#{observe_code}
	</update>
	
	<!-- 관측소 삭제 -->
	<delete id="ijObDelete" parameterType="Observation">
		DELETE FROM Observation WHERE observe_code=#{observe_code}
	</delete>
	
	
	<!-- 2. 관측소 - 시자료 - 수위 -->
	
	<!-- 시자료 수위 리스트 -->
	<select id="ijWaterLevelList" parameterType="WaterLevel" resultType="WaterLevel">
			SELECT *
			FROM(
				SELECT (row_number() over()) AS rn, a.*
				FROM(
					SELECT W.*, T.observe_post, T.observe_code, T.observe_type,
						(SELECT cate_name FROM code WHERE field_name = 'observe_type' AND cate_code = T.observe_Type) observe_type_name
						FROM 
						   water_level W
						   LEFT OUTER JOIN Observation T
						   ON W.river_code = T.river_code
						   WHERE W.river_code=#{river_code}
						   ORDER BY observe_date DESC
						  )a
				)
		WHERE rn BETWEEN #{start} and #{end}				
	</select>

	<!-- 시자료 수위 리스트 : 통계-->
	<select id="ijWaterLevelStat" parameterType="WaterLevel" resultType="WaterLevel">
		SELECT *
		FROM(
			SELECT (row_number() over()) AS rn, a.*
			FROM(
				SELECT W.*, T.observe_post, T.observe_code, T.observe_type,
					(SELECT cate_name FROM code WHERE field_name = 'observe_type' AND cate_code = T.observe_Type) observe_type_name
					FROM 
					   water_level W
					   LEFT OUTER JOIN Observation T
					   ON W.river_code = T.river_code
					   WHERE W.river_code=#{river_code}
					   ORDER BY observe_date DESC
					  )a
			WHERE a.observe_date = #{start_date}
			)			
		WHERE rn BETWEEN 1 and 1
	</select>

	<!-- waterLevel Total -->
	<select id="ijWaterLevelTotal" resultType="int">
		SELECT COUNT(*)
		FROM Water_Level
	</select>
	
	
	<!-- 수위 조회 -->
	
	<select id="ijGetWaterLevel" parameterType="WaterLevel" resultType="WaterLevel">
		SELECT W.*, T.observe_post, T.observe_code, T.observe_type,
				(SELECT cate_name FROM code WHERE field_name = 'observe_type' AND cate_code = T.observe_Type) observe_type_name
		FROM 
				water_level W
				LEFT OUTER JOIN Observation T
				 ON W.river_code = T.river_code
		WHERE W.river_code=#{river_code} AND W.observe_date=#{observe_date}
	</select>
	
	<!-- 수위 수정 -->
	<update id="ijTEdit" parameterType="WaterLevel">
		UPDATE water_level SET
			hour_01=#{hour_01},
			hour_02=#{hour_02},
			hour_03=#{hour_03},
			hour_04=#{hour_04},
			hour_05=#{hour_05},
			hour_06=#{hour_06},
			hour_07=#{hour_07},
			hour_08=#{hour_08},
			hour_09=#{hour_09},
			hour_10=#{hour_10},
			hour_11=#{hour_11},
			hour_12=#{hour_12},
			hour_13=#{hour_13},
			hour_14=#{hour_14},
			hour_15=#{hour_15},
			hour_16=#{hour_16},
			hour_17=#{hour_17},
			hour_18=#{hour_18},
			hour_19=#{hour_19},
			hour_20=#{hour_20},
			hour_21=#{hour_21},
			hour_22=#{hour_22},
			hour_23=#{hour_23},
			hour_24=#{hour_24}
		WHERE river_code=#{river_code} AND observe_date=#{observe_date}

	</update>

<!-- 3. 관측소 - 시자료 - 강우량 -->

	<!-- 시자료 강우량 리스트 -->
	<select id="ijRainFallList" parameterType="RainFall" resultType="RainFall">
			SELECT *
			FROM(
				SELECT (row_number() over()) AS rn, a.*
				FROM(
					SELECT R.*, T.observe_post, T.observe_code, T.observe_type,
						(SELECT cate_name FROM code WHERE field_name = 'observe_type' AND cate_code = T.observe_Type) observe_type_name
						FROM 
						   rainfall R
						   LEFT OUTER JOIN Observation T
						   ON R.river_code = T.river_code
						   WHERE R.river_code=#{river_code}
						   ORDER BY observe_date DESC
						  )a
				)
		WHERE rn BETWEEN #{start} and #{end}
				
	</select>

	<!-- 시자료 강우량 통계 -->
	<select id="ijRainFallStat" parameterType="RainFall" resultType="RainFall">
		SELECT *
		FROM(
				SELECT (row_number() over()) AS rn, a.*
				FROM(
					SELECT R.*, T.observe_post, T.observe_code, T.observe_type,
						(SELECT cate_name FROM code WHERE field_name = 'observe_type' AND cate_code = T.observe_Type) observe_type_name
						FROM 
						   rainfall R
						   LEFT OUTER JOIN Observation T
						   ON R.river_code = T.river_code
						   WHERE R.river_code=#{river_code}
						   ORDER BY observe_date DESC
				)a
				WHERE a.observe_date = #{start_date}
			)
		WHERE rn BETWEEN 1 and 1
				
	</select>
	
	<!-- rainFall Total -->
	<select id="ijRainFallTotal" resultType="int">
		SELECT COUNT(*)
		FROM rainfall
	</select>
	
	
	<!-- 강우량 조회 -->
	<select id="ijGetRainFall" parameterType="RainFall" resultType="RainFall">
		SELECT R.*, T.observe_post, T.observe_code, T.observe_type,
				(SELECT cate_name FROM code WHERE field_name = 'observe_type' AND cate_code = T.observe_Type) observe_type_name
		FROM 
				rainfall R
				LEFT OUTER JOIN Observation T
				 ON R.river_code = T.river_code
		WHERE R.river_code=#{river_code} AND R.observe_date=#{observe_date}
	</select>
	
	<!-- 강우량 수정 -->
	<update id="ijTEditR" parameterType="RainFall">
		UPDATE rainfall SET
			hour_01=#{hour_01},
			hour_02=#{hour_02},
			hour_03=#{hour_03},
			hour_04=#{hour_04},
			hour_05=#{hour_05},
			hour_06=#{hour_06},
			hour_07=#{hour_07},
			hour_08=#{hour_08},
			hour_09=#{hour_09},
			hour_10=#{hour_10},
			hour_11=#{hour_11},
			hour_12=#{hour_12},
			hour_13=#{hour_13},
			hour_14=#{hour_14},
			hour_15=#{hour_15},
			hour_16=#{hour_16},
			hour_17=#{hour_17},
			hour_18=#{hour_18},
			hour_19=#{hour_19},
			hour_20=#{hour_20},
			hour_21=#{hour_21},
			hour_22=#{hour_22},
			hour_23=#{hour_23},
			hour_24=#{hour_24}
		WHERE river_code=#{river_code} AND observe_date=#{observe_date}
	</update>
	
<!-- 4. 관측소 - 시자료 - 우량 -->

	<!-- 우량 리스트 -->
	<select id="ijFlowList" parameterType="Flow" resultType="Flow">
					SELECT F.*, T.observe_post, T.observe_code, T.observe_type,
						(SELECT cate_name FROM code WHERE field_name = 'observe_type' AND cate_code = T.observe_Type) observe_type_name
						FROM 
						   flow F
						   LEFT OUTER JOIN Observation T
						   ON F.river_code = T.river_code
						   WHERE F.river_code=#{river_code} AND F.observe_year=#{observe_year}
						   ORDER BY observe_day	
	</select>
	
	<!-- flow Total -->
	<select id="ijFlowTotal" resultType="int">
		SELECT COUNT(*)
		FROM flow
	</select>
	
	
	<!-- 우량 조회 -->
	
	<select id="ijGetFlow" parameterType="Flow" resultType="Flow">
		SELECT F.*, T.observe_post, T.observe_code, T.observe_type,
				(SELECT cate_name FROM code WHERE field_name = 'observe_type' AND cate_code = T.observe_Type) observe_type_name
		FROM 
				flow F
				LEFT OUTER JOIN Observation T
				ON F.river_code = T.river_code
		WHERE F.river_code=#{river_code} AND F.observe_year=#{observe_year} AND F.observe_day=#{observe_day}
	</select>
	
	<select id="ijFlowYearList" resultType="Flow">
		SELECT observe_year
		FROM flow
		GROUP BY observe_year
	</select>
	
	<!-- 우량 수정 -->
	<update id="ijTEditF" parameterType="Flow">
		UPDATE flow SET
			january=#{january},
			february=#{february},
			march=#{march},
			april=#{april},
			may=#{may},
			june=#{june},
			july=#{july},
			august=#{august},
			september=#{september},
			october=#{october},
			november=#{november},
			december=#{december}
		WHERE river_code=#{river_code} AND observe_year=#{observe_year} AND observe_day=#{observe_day}
	</update>

<!-- 관측소 검색 갯수 **************-->
	<select id="ijSearchTotalO" parameterType="Observation" resultType="int">
		SELECT COUNT(*)
	    FROM(
	      SELECT T.*, C.cate_name observe_method_name, O.org_name, O.org_area
	      FROM 
	         Observation T
	         LEFT OUTER JOIN Code C
	           ON T.observe_method = C.cate_code
	          AND C.field_name     = 'observe_method'
	         LEFT OUTER JOIN Organization O
	           ON T.org_code = O.org_code
	      ) a
	     WHERE 1 =1
	     <if test="observe_method != ''">
	 	 AND a.observe_method = #{observe_method}
	 	 </if>
	 	 <if test="org_code != ''">
	     AND a.org_code = #{org_code}
	 	 </if> 
	     <if test="observe_post != ''">
	     AND a.observe_post like '%' || #{observe_post} || '%'	
		 </if> 
	   
	</select>
	<!-- 관측소 검색 -->
	<select id="ijSearchO" parameterType="Observation" resultType="Observation">

			SELECT *
			FROM
			(
			   SELECT (row_number() over()) AS rn, a.*
			   FROM(
			      SELECT T.*, C.cate_name observe_method_name, O.org_name, O.org_area
			      FROM 
			         Observation T
			         LEFT OUTER JOIN Code C
			           ON T.observe_method = C.cate_code
			          AND C.field_name     = 'observe_method'
			         LEFT OUTER JOIN Organization O
			           ON T.org_code = O.org_code
			      ) a
			     WHERE 1 =1
			     <if test="observe_method != ''">
			 	 AND a.observe_method = #{observe_method}
			 	 </if>
			 	 <if test="org_code != ''">
			     AND a.org_code = #{org_code}
			     </if> 
			     <if test="observe_post != ''">
			     AND a.observe_post like '%' || #{observe_post} || '%'
			     </if> 
			)
			WHERE rn BETWEEN #{start} and #{end}
			
	</select>
	
	
	<!-- 시자료 - 수위 검색 갯수 -->
	<select id="ijSearchTotalW" parameterType="WaterLevel" resultType="int">
		SELECT COUNT(*)
		FROM(
			SELECT (row_number() over()) AS rn, a.*
			FROM(
				SELECT W.*, T.observe_post, T.observe_code, T.observe_type,
					(SELECT cate_name FROM code WHERE field_name = 'observe_type' AND cate_code = T.observe_Type) observe_type_name
					, TO_CHAR(W.observe_date, 'YYYY-MM-DD') observe_date_str
				FROM 
				   water_level W
					   LEFT OUTER JOIN Observation T
					   ON W.river_code = T.river_code
			   WHERE W.river_code = #{river_code}
			   ORDER BY observe_date DESC
				)a
			WHERE 1=1
				<choose>
					<when test=" #{start_date}== ''">
						<![CDATA[ and  a.observe_date <= #{end_date}]]>
					</when>
					<when test="#{end_date} == ''">
						<![CDATA[ and a.observe_date >= #{start_date}]]>
					</when>
					<otherwise>
						AND a.observe_date BETWEEN #{start_date} AND #{end_date}
					</otherwise>
				</choose>
				)
	</select>		
				
	<!-- 시자료 - 수위 검색 -->
	<select id="ijSearchW" parameterType="WaterLevel" resultType="WaterLevel">
		SELECT *
		FROM(
			SELECT (row_number() over()) AS rn, a.*
			FROM(
				SELECT W.*, T.observe_post, T.observe_code, T.observe_type,
					(SELECT cate_name FROM code WHERE field_name = 'observe_type' AND cate_code = T.observe_Type) observe_type_name
					, TO_CHAR(W.observe_date, 'YYYY-MM-DD') observe_date_str
				FROM 
				   water_level W
					   LEFT OUTER JOIN Observation T
					   ON W.river_code = T.river_code
			   WHERE W.river_code = #{river_code}
			   ORDER BY observe_date DESC
				)a
			WHERE 1=1
				<choose>
					<when test=" #{start_date}== ''">
						<![CDATA[ and  a.observe_date <= #{end_date}]]>
					</when>
					<when test="#{end_date} == ''">
						<![CDATA[ and a.observe_date >= #{start_date}]]>
					</when>
					<otherwise>
						AND a.observe_date BETWEEN #{start_date} AND #{end_date}
					</otherwise>
				</choose>
				)
		WHERE rn BETWEEN #{start} and #{end}
		
	</select>
	
	
		<!-- 시자료 - 강우량 검색 갯수 -->
	<select id="ijSearchTotalR" parameterType="RainFall" resultType="int">
		SELECT COUNT(*)
		FROM(
			SELECT (row_number() over()) AS rn, a.*
			FROM(
				SELECT R.*, T.observe_post, T.observe_code, T.observe_type,
					(SELECT cate_name FROM code WHERE field_name = 'observe_type' AND cate_code = T.observe_Type) observe_type_name
					FROM 
					   rainfall R
					   LEFT OUTER JOIN Observation T
					   ON R.river_code = T.river_code
					   WHERE R.river_code=#{river_code}
					   ORDER BY observe_date DESC
				)a
			WHERE 1=1
				<choose>
					<when test=" #{start_date}== ''">
						<![CDATA[ and  a.observe_date <= #{end_date}]]>
					</when>
					<when test="#{end_date} == ''">
						<![CDATA[ and a.observe_date >= #{start_date}]]>
					</when>
					<otherwise>
						AND a.observe_date BETWEEN #{start_date} AND #{end_date}
					</otherwise>
				</choose>
				)
	</select>
	
	
	<!-- 시자료 - 강우량 검색 -->
	<select id="ijSearchR" parameterType="RainFall" resultType="RainFall">
		SELECT *
		FROM(
			SELECT (row_number() over()) AS rn, a.*
			FROM(
				SELECT R.*, T.observe_post, T.observe_code, T.observe_type,
					(SELECT cate_name FROM code WHERE field_name = 'observe_type' AND cate_code = T.observe_Type) observe_type_name
					, TO_CHAR(R.observe_date, 'YYYY-MM-DD') observe_date_str
					FROM 
					   rainfall R
					   LEFT OUTER JOIN Observation T
					   ON R.river_code = T.river_code
					   WHERE R.river_code=#{river_code}
					   ORDER BY observe_date DESC
					  )a
			  WHERE 1=1
				<choose>
					<when test=" #{start_date}== ''">
						<![CDATA[ and  a.observe_date <= #{end_date}]]>
					</when>
					<when test="#{end_date} == ''">
						<![CDATA[ and a.observe_date >= #{start_date}]]>
					</when>
					<otherwise>
						AND a.observe_date BETWEEN #{start_date} AND #{end_date}
					</otherwise>
				</choose>
			)
	WHERE rn BETWEEN #{start} and #{end}
			
</select>
</mapper>